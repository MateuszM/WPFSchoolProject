using System;
using System.ComponentModel.Composition;
using System.IO;
using System.Reflection;
using System.Text;


namespace Tpa3.Loggers
{
    [Export(typeof(ILogger))]
    public class Logger : ILogger
    {

       
            private string DatetimeFormat;
            private string Filename;

          public void Write(bool l)
        {
            //throw new NotImplementedException();
        }
            public Logger(bool append = false)
            {
                DatetimeFormat = "yyyy-MM-dd HH:mm:ss.fff";
                Filename = Assembly.GetExecutingAssembly().GetName().Name + ".log";

                // Log file header line
                string logHeader = Filename + " is created.";
                if (!File.Exists(Filename))
                {
                    WriteLine(DateTime.Now.ToString(DatetimeFormat) + " " + logHeader, false);
                }
                else
                {
                    if (append == false)
                        WriteLine(DateTime.Now.ToString(DatetimeFormat) + " " + logHeader, false);
                }
            }

            
            public void Debug(string text)
            {
                WriteFormattedLog(LogLevel.DEBUG, text);
            }

            
            public void Error(string text)
            {
                WriteFormattedLog(LogLevel.ERROR, text);
            }

        public void Error()
        {
            throw new NotImplementedException();
        }

        public void Fatal(string text)
            {
                WriteFormattedLog(LogLevel.FATAL, text);
            }

        public void Fatal()
        {
            throw new NotImplementedException();
        }

        public void Info(string text)
            {
                WriteFormattedLog(LogLevel.INFO, text);
            }

            
            public void Trac(string text)
            {
                WriteFormattedLog(LogLevel.TRACE, text);
            }

          
            public void Warning(string text)
            {
                WriteFormattedLog(LogLevel.WARNING, text);
            }

        private void WriteFormattedLog()
        {
            throw new NotImplementedException();
        }

        private void WriteFormattedLog(LogLevel level, string text)
            {
                string pretext;
                switch (level)
                {
                    case LogLevel.TRACE: pretext = DateTime.Now.ToString(DatetimeFormat) + " [TRACE]   "; break;
                    case LogLevel.INFO: pretext = DateTime.Now.ToString(DatetimeFormat) + " [INFO]    "; break;
                    case LogLevel.DEBUG: pretext = DateTime.Now.ToString(DatetimeFormat) + " [DEBUG]   "; break;
                    case LogLevel.WARNING: pretext = DateTime.Now.ToString(DatetimeFormat) + " [WARNING] "; break;
                    case LogLevel.ERROR: pretext = DateTime.Now.ToString(DatetimeFormat) + " [ERROR]   "; break;
                    case LogLevel.FATAL: pretext = DateTime.Now.ToString(DatetimeFormat) + " [FATAL]   "; break;
                    default: pretext = ""; break;
                }

                WriteLine(pretext + text);
            }

            
            private void WriteLine(string text, bool append = true)
            {
                try
                {
                    using (StreamWriter Writer = new StreamWriter(Filename, append, Encoding.UTF8))
                    {
                        if (text != "") Writer.WriteLine(text);
                    }
                }
                catch
                {
                    throw;
                }
            }

           
            [Flags]
            private enum LogLevel
            {
                TRACE,
                INFO,
                DEBUG,
                WARNING,
                ERROR,
                FATAL
            }
        }
    }

